# PySNMP SMI module. Autogenerated from smidump -f python ARISTA-VRF-MIB
# by libsmi2pysnmp-0.1.3 at Tue Jan 31 10:06:37 2017,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( aristaMibs, ) = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ifIndex, ) = mibBuilder.importSymbols("IF-MIB", "ifIndex")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class VrfName(TextualConvention, OctetString):
    displayHint = "100t"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,100)
    
class VrfRouteDistinguisher(TextualConvention, OctetString):
    displayHint = "256a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,256)
    
class VrfState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("active", 1), ("inactive", 2), )
    

# Objects

aristaVrfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 18)).setRevisions(("2015-01-11 00:00",))
if mibBuilder.loadTexts: aristaVrfMIB.setOrganization("Arista Networks, Inc.")
if mibBuilder.loadTexts: aristaVrfMIB.setContactInfo("Arista Networks, Inc.\n\nPostal: 5453 Great America Parkway\n        Santa Clara, CA 95054\n\nTel: +1 408 547-5500\n\nE-mail: snmp@arista.com")
if mibBuilder.loadTexts: aristaVrfMIB.setDescription("This MIB contains information related to Virtual \nRouting and Forwarding (VRF).\n\nVRF is a mechanism by which a single device can provide\nindependent routing instances. This allows customers to \nvirtually isolate network traffic, and also use overlapping\nIP addresses.\n\nLayer3 or routed interfaces in the system will belong to\none VRF at a time. The datapath forwarding logic uses the\nVRF membership of the input interface to determine a\nspecific forwarding table to use for routing the traffic.\n\nVRF can also be used to isolate management traffic from\nthe rest of the data plane traffic.\n\nThis MIB module provides the following pieces of\ninformation:\n    * A table of all VRFs configured in the system\n    * A table that contains the VRF membership information\n    for all routed interfaces in the system by sparsely\n    augmenting the ifTable.")
aristaVrfMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1))
aristaVrfTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 1))
if mibBuilder.loadTexts: aristaVrfTable.setDescription("This table contains information about VRFs currently\nconfigured in the system.")
aristaVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 1, 1)).setIndexNames((0, "ARISTA-VRF-MIB", "aristaVrfName"))
if mibBuilder.loadTexts: aristaVrfEntry.setDescription("A single row containing information for one VRF that is\nconfigured in the system.")
aristaVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 1, 1, 1), VrfName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaVrfName.setDescription("The name of the VRF that is represented by this row.")
aristaVrfRoutingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 1, 1, 2), Bits().subtype(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaVrfRoutingStatus.setDescription("The current status of data path routing in this VRF.\nRouting for IPv4 and IPv6 packets can be independently\nenabled by the administrator for a given VRF. This object\ncarries the routing status for both the protocol versions.\nIf data path routing is enabled for a protocol, the bit\nfor the protocol is 1.")
aristaVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 1, 1, 3), VrfRouteDistinguisher()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaVrfRouteDistinguisher.setDescription("The route distinguisher for this VRF.")
aristaVrfState = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 1, 1, 4), VrfState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaVrfState.setDescription("The state of the VRF.")
aristaVrfIfTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 2))
if mibBuilder.loadTexts: aristaVrfIfTable.setDescription("This table augments the ifTable and contains the \nVRF membership information for every routed interface\nin the system. A row is present only for each active\nrouted (or layer3) interface.")
aristaVrfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 2, 1)).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: aristaVrfIfEntry.setDescription("VRF membership information for a single routed interface.")
aristaVrfIfMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 18, 1, 2, 1, 1), VrfName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaVrfIfMembership.setDescription("The name of the VRF that this routed interface is currently\npart of.")
aristaVrfMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 18, 2))
aristaVrfMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 18, 2, 1))
aristaVrfMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 18, 2, 2))

# Augmentions

# Groups

aristaVrfInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 18, 2, 2, 1)).setObjects(*(("ARISTA-VRF-MIB", "aristaVrfState"), ("ARISTA-VRF-MIB", "aristaVrfRoutingStatus"), ("ARISTA-VRF-MIB", "aristaVrfIfMembership"), ("ARISTA-VRF-MIB", "aristaVrfRouteDistinguisher"), ) )
if mibBuilder.loadTexts: aristaVrfInformationGroup.setDescription("The collection of objects that provide VRF information in the\nsystem.")

# Compliances

aristaVrfMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 18, 2, 1, 1)).setObjects(*(("ARISTA-VRF-MIB", "aristaVrfInformationGroup"), ) )
if mibBuilder.loadTexts: aristaVrfMibCompliance.setDescription("The compliance statement for Arista switches that implement\nthe ARISTA-VRF-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("ARISTA-VRF-MIB", PYSNMP_MODULE_ID=aristaVrfMIB)

# Types
mibBuilder.exportSymbols("ARISTA-VRF-MIB", VrfName=VrfName, VrfRouteDistinguisher=VrfRouteDistinguisher, VrfState=VrfState)

# Objects
mibBuilder.exportSymbols("ARISTA-VRF-MIB", aristaVrfMIB=aristaVrfMIB, aristaVrfMibObjects=aristaVrfMibObjects, aristaVrfTable=aristaVrfTable, aristaVrfEntry=aristaVrfEntry, aristaVrfName=aristaVrfName, aristaVrfRoutingStatus=aristaVrfRoutingStatus, aristaVrfRouteDistinguisher=aristaVrfRouteDistinguisher, aristaVrfState=aristaVrfState, aristaVrfIfTable=aristaVrfIfTable, aristaVrfIfEntry=aristaVrfIfEntry, aristaVrfIfMembership=aristaVrfIfMembership, aristaVrfMibConformance=aristaVrfMibConformance, aristaVrfMibCompliances=aristaVrfMibCompliances, aristaVrfMibGroups=aristaVrfMibGroups)

# Groups
mibBuilder.exportSymbols("ARISTA-VRF-MIB", aristaVrfInformationGroup=aristaVrfInformationGroup)

# Compliances
mibBuilder.exportSymbols("ARISTA-VRF-MIB", aristaVrfMibCompliance=aristaVrfMibCompliance)
