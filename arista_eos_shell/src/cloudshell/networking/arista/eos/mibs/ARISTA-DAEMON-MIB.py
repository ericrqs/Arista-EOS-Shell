# PySNMP SMI module. Autogenerated from smidump -f python ARISTA-DAEMON-MIB
# by libsmi2pysnmp-0.1.3 at Tue Jan 31 10:06:37 2017,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( aristaMibs, ) = mibBuilder.importSymbols("ARISTA-SMI-MIB", "aristaMibs")
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
( Bits, Integer32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
( TextualConvention, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue")

# Types

class AgentAttributeKey(TextualConvention, OctetString):
    displayHint = "64a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,64)
    
class AgentAttributeValue(TextualConvention, OctetString):
    displayHint = "10240a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,10240)
    
class AgentName(TextualConvention, OctetString):
    displayHint = "32a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,32)
    

# Objects

aristaDaemonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 30065, 3, 17)).setRevisions(("2015-04-27 00:00",))
if mibBuilder.loadTexts: aristaDaemonMIB.setOrganization("Arista Networks, Inc.")
if mibBuilder.loadTexts: aristaDaemonMIB.setContactInfo("Arista Networks, Inc.\n\nPostal: 5453 Great America Parkway\n        Santa Clara, CA 95054\n\nTel: +1 408 547-5500\n\nE-mail: snmp@arista.com")
if mibBuilder.loadTexts: aristaDaemonMIB.setDescription("The MIB module for managing the state of custom agents for Arista EOS.")
aristaDaemonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1))
aristaDaemonEnabledTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 1))
if mibBuilder.loadTexts: aristaDaemonEnabledTable.setDescription("A table that contains the enabled configurations for custom daemons.")
aristaDaemonEnabledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 1, 1)).setIndexNames((0, "ARISTA-DAEMON-MIB", "aristaDaemonEnabledAgentName"))
if mibBuilder.loadTexts: aristaDaemonEnabledEntry.setDescription("The enabled configuration of a daemon.")
aristaDaemonEnabledAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 1, 1, 1), AgentName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaDaemonEnabledAgentName.setDescription("The name of the agent.")
aristaDaemonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaDaemonEnabled.setDescription("This attribute has value 'true(1)' if the agent is enabled and value 'false(2)' if it is disabled.")
aristaDaemonOptionTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 2))
if mibBuilder.loadTexts: aristaDaemonOptionTable.setDescription("A table that contains user-configured options for daemons.")
aristaDaemonOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 2, 1)).setIndexNames((0, "ARISTA-DAEMON-MIB", "aristaDaemonOptionAgentName"), (0, "ARISTA-DAEMON-MIB", "aristaDaemonOptionKey"))
if mibBuilder.loadTexts: aristaDaemonOptionEntry.setDescription("A user-configured daemon option entry.")
aristaDaemonOptionAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 2, 1, 1), AgentName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaDaemonOptionAgentName.setDescription("The name of the agent.")
aristaDaemonOptionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 2, 1, 2), AgentAttributeKey()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaDaemonOptionKey.setDescription("The name of a user-configured option.")
aristaDaemonOptionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 1, 2, 1, 3), AgentAttributeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaDaemonOptionValue.setDescription("The value of a user-configured option.")
aristaDaemonStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2))
aristaDaemonRunningTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 1))
if mibBuilder.loadTexts: aristaDaemonRunningTable.setDescription("A table that contains the running statuses for custom daemons.")
aristaDaemonRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 1, 1)).setIndexNames((0, "ARISTA-DAEMON-MIB", "aristaDaemonRunningAgentName"))
if mibBuilder.loadTexts: aristaDaemonRunningEntry.setDescription("The running status of a daemon.")
aristaDaemonRunningAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 1, 1, 1), AgentName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaDaemonRunningAgentName.setDescription("The name of the agent.")
aristaDaemonRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaDaemonRunning.setDescription("This attribute has value 'true(1)' if the agent is running and value 'false(2)' if it is not running.")
aristaDaemonDataTable = MibTable((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 2))
if mibBuilder.loadTexts: aristaDaemonDataTable.setDescription("A table that contains status data for daemons.")
aristaDaemonDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 2, 1)).setIndexNames((0, "ARISTA-DAEMON-MIB", "aristaDaemonDataAgentName"), (0, "ARISTA-DAEMON-MIB", "aristaDaemonDataKey"))
if mibBuilder.loadTexts: aristaDaemonDataEntry.setDescription("A daemon data entry about its status.")
aristaDaemonDataAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 2, 1, 1), AgentName()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaDaemonDataAgentName.setDescription("The name of the agent.")
aristaDaemonDataKey = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 2, 1, 2), AgentAttributeKey()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: aristaDaemonDataKey.setDescription("The name of a status data entry.")
aristaDaemonDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 30065, 3, 17, 2, 2, 1, 3), AgentAttributeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aristaDaemonDataValue.setDescription("The value of a status data.")
aristaDaemonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 17, 3))
aristaDaemonGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 17, 3, 1))
aristaDaemonCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 30065, 3, 17, 3, 2))

# Augmentions

# Groups

aristaDaemonBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 30065, 3, 17, 3, 1, 1)).setObjects(*(("ARISTA-DAEMON-MIB", "aristaDaemonOptionValue"), ("ARISTA-DAEMON-MIB", "aristaDaemonRunning"), ("ARISTA-DAEMON-MIB", "aristaDaemonEnabled"), ("ARISTA-DAEMON-MIB", "aristaDaemonDataValue"), ) )
if mibBuilder.loadTexts: aristaDaemonBaseGroup.setDescription("A collection of objects providing information about the custom agent.")

# Compliances

aristaDaemonCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 30065, 3, 17, 3, 2, 1)).setObjects(*(("ARISTA-DAEMON-MIB", "aristaDaemonBaseGroup"), ) )
if mibBuilder.loadTexts: aristaDaemonCompliance.setDescription("The compliance statement for Arista switches that support EOS SDK custom agents.")

# Exports

# Module identity
mibBuilder.exportSymbols("ARISTA-DAEMON-MIB", PYSNMP_MODULE_ID=aristaDaemonMIB)

# Types
mibBuilder.exportSymbols("ARISTA-DAEMON-MIB", AgentAttributeKey=AgentAttributeKey, AgentAttributeValue=AgentAttributeValue, AgentName=AgentName)

# Objects
mibBuilder.exportSymbols("ARISTA-DAEMON-MIB", aristaDaemonMIB=aristaDaemonMIB, aristaDaemonConfig=aristaDaemonConfig, aristaDaemonEnabledTable=aristaDaemonEnabledTable, aristaDaemonEnabledEntry=aristaDaemonEnabledEntry, aristaDaemonEnabledAgentName=aristaDaemonEnabledAgentName, aristaDaemonEnabled=aristaDaemonEnabled, aristaDaemonOptionTable=aristaDaemonOptionTable, aristaDaemonOptionEntry=aristaDaemonOptionEntry, aristaDaemonOptionAgentName=aristaDaemonOptionAgentName, aristaDaemonOptionKey=aristaDaemonOptionKey, aristaDaemonOptionValue=aristaDaemonOptionValue, aristaDaemonStatus=aristaDaemonStatus, aristaDaemonRunningTable=aristaDaemonRunningTable, aristaDaemonRunningEntry=aristaDaemonRunningEntry, aristaDaemonRunningAgentName=aristaDaemonRunningAgentName, aristaDaemonRunning=aristaDaemonRunning, aristaDaemonDataTable=aristaDaemonDataTable, aristaDaemonDataEntry=aristaDaemonDataEntry, aristaDaemonDataAgentName=aristaDaemonDataAgentName, aristaDaemonDataKey=aristaDaemonDataKey, aristaDaemonDataValue=aristaDaemonDataValue, aristaDaemonConformance=aristaDaemonConformance, aristaDaemonGroups=aristaDaemonGroups, aristaDaemonCompliances=aristaDaemonCompliances)

# Groups
mibBuilder.exportSymbols("ARISTA-DAEMON-MIB", aristaDaemonBaseGroup=aristaDaemonBaseGroup)

# Compliances
mibBuilder.exportSymbols("ARISTA-DAEMON-MIB", aristaDaemonCompliance=aristaDaemonCompliance)
